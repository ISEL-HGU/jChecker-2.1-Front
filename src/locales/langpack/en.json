{
    "start_button": "Get Started",
    "about_button": "About",
    "input.": "Token",
    "input.token": "Enter a class token",
    "generate.token": "Generate a token",
    "closed": "Close",
    "delete": "Delete",
    "next": "Next",
    "submit": "Submit",
    "add": "Add",
    "studentNum": "Student number",
    "studentNum.placeholder": "Enter your student number",
    "studentEmail": "Email address",
    "studentEmail.placeholder": "Enter your email address",

    "gtoken": "Classroom Entry Token (For students)",
    "itoken": "Classroom Management Token (Instructor ONLY!)",

    "detail.1.1": "Upload the source codes.",
    "detail.1.2": "They can be .zip file or Github URL.",
    "detail.2.1": "Submissions are graded with static analysis, scoring criteria, and test cases.",
    "detail.2.2": "",
    "detail.3.1": "Offer your feedback",
    "detail.3.2": "to explain the results.",
    "detail.4.1": "Provide a graph that",
    "detail.4.2": "visualizes the OOP concept",
    "detail.4.3": "of your program.",
    "detail.5.1": "Apply Fault Localization",
    "detail.5.2": "to show high-risk code.",
    "detail.6.1": "The direction of code repair",
    "detail.6.2": "is presented through",
    "detail.6.3": "Automated Program Repair.",

    "error.1": "Something is wrong...",
    "error.2": "This may be an invalid file, internal server error, or an invalid address request.",
    "error.3": "If this page came out when entering the class, please check if the token is correct.",
    "error.4": "And if this page appears when submitting, check your file and try again.",

    "entrance.class title": "ENTRANCE",
    "entrance.class detail": "Enter the classroom using the class token you received in advance.",

    "entrance.instructor title": "Are you an instructor?",
    "entrance.instructor detail.1": "Follow these steps",
    "entrance.instructor detail.2": "to create a class.",
    "entrance.instructor detail.3": "Do you already have a token?",
    "entrance.instructor detail.4": "Enter a token to manage your class!",
    "entrance.instructor.tdialog.1": "Set up tokens",
    "entrance.instructor.tdialog.e": "If you check ",
    "entrance.instructor.tdialog.2": "Direct Feedback",
    "entrance.instructor.tdialog.3": ", all grading results will be provided to students immediately.",
    "entrance.instructor.tdialog.4": "Otherwise, the results are stored only in the database and are not visible to students.",
    "package path": "Package path",
    "class name": "Class Name",
    "method name": "Method Name",
    "interface name": "Interface Name",
    "Interface class name": "Implemented Class Name",
    "Inherited class name": "Subclass Name",
    "super class name": "Superclass Name",

    "instructor name": "Instructor Name",

    "dialog.1": "Grading policy",
    "dialog.2": "Select which details to examine for using static analysis and test oracle.",
    "dialog.deadline": "Deadline",
    "check.again.1": "Policy is successfully saved.",
    "check.again.2": "If you forgot the token, check it out one more time!",

    "dialog.update.1": "Update grading policy",
    "dialog.update.2": "Edit and save the grading policy that you have already registered.",
    "dialog.update.3": "Click the \"✏️ Edit\" button to edit the grading policy for each part.︎︎",

    "file transfer": "No files selected.",

    "policy.point": "Total score",
    "policy.level": "Level of feedback",
    "policy.count.methods": "Minimum number of methods",
    "policy.count.fields": "Minimum number of fields",
    "policy.count.enhance": "Minimum number of Enhanced for statement",
    "policy.count.1": "Minimum number of details",
    "policy.count.2": "Counts the total number of codes, and any violation of the standard is wrong.",
    "policy.basic.deduct.boolean": "Deduction for violation",
    "policy.basic.deduct": "Deduction per violation",
    "policy.basic.max": "Maximum deduction",
    "policy.class.1": "Required Classes",
    "policy.class.2": "Is there a required class?",
    "policy.compiled.1": "Compilation Status",
    "policy.compiled.2": "The compilation, which is the basis of grading, must be done, right?",
    "policy.compiled.build": "Compile with build tools",
    "policy.custom.ds.1": "Customized Data Structure Class",
    "policy.custom.ds.2": "Should there be a data structure class defined by user?",
    "policy.custom.ex.1": "Customized Exception Class",
    "policy.custom.ex.2": "Should there be an exception class defined by user?",
    "policy.encap.1": "Encapsulation Enabled",
    "policy.encap.2": "Determine whether the codes were followed encapsulation rules using proper Access modifiers.",
    "policy.interface.1": "Interface Inheritance",
    "policy.interface.2": "Determine whether the interface is created and inherited properly.",
    "policy.io.1": "Test Cases",
    "policy.io.2": "Add cases to check as the program executes the submitted code.",
    "policy.io.input": "Input",
    "policy.io.output": "Output",
    "policy.io.filePath": "Output File path",
    "policy.io.checksum": "File checksum",
    "policy.javadoc.1": "Javadoc Settings",
    "policy.javadoc.2": "All 'public' fields and methods must have javadoc.",
    "policy.overloading.1": "Overloading check",
    "policy.overloading.2": "Which method should be overloaded?",
    "policy.overriding.1": "Overriding check",
    "policy.overriding.2": "Which method should be overrided?",
    "policy.package.1": "Required Packages",
    "policy.package.2": "Enter to specify package path!",
    "policy.super.1": "Superclass Inheritance",
    "policy.super.2": "Determine whether the superclass is inherited properly.",
    "policy.thread.1": "Thread Settings",
    "policy.thread.2": "Determine whether the thread class was inherited and actually used.",
    "policy.ms.1": "Required Methods",
    "policy.ms.2": "Is there a required method?",
    "policy.ms.method": "Method name",
    "policy.ms.count": "Minimum number of usages",
    "policy.ms.class": "Class name of method",

    "begin.getting start": "Let's Get Started!",
    "begin.enter token": "Enter the authentication token",
    "begin.enter token rest": "to enter the opened class.",
    "begin.enter generate contact": "Do you want to run a class? Please contact us, JCHECKER 2.0 team.",

    "result.score.success": "Scoring completed!",
    "result.score.delay": "The score was deducted after the deadline (-1 per day).",
    "result.score.count": "The number of fields, methods or (if required) advanced for statements is insufficient.",
    "result.score.class": "Class : No specified classes.",
    "result.score.method": "Method : The method does not exist or has not been used.",
    "result.score.compile": "Compilation : There is a problem with the compilation.",
    "result.score.testcase": "Test case : Wrong. Make test cases yourself and check them again.",
    "result.score.testcase.failed": "Failed test case #",
    "result.score.checksum.failed": "Checksum error #",
    "result.score.package": "Package : Package path is not valid.",
    "result.score.customexc": "Custom Exception Class : The class does not exist or has not been used.",
    "result.score.customstr": "Custom Data Class : The class does not exist or has not been used.",
    "result.score.interface": "Interface : The specified interface was not inherited.",
    "result.score.superclass": "Superclass : The specified superclass was not inherited.",
    "result.score.overriding": "Overriding : Methods of parent class were not overridden.",
    "result.score.overloading": "Overloading : No methods applied overloading.",
    "result.score.thread": "Thread : thread does not appear to be implemented.",
    "result.score.javadoc": "Javadoc : Javadoc is insufficient or may not have been created.",
    "result.score.encap": "Encapsulation : The class without encapsulation was found.",
    "result.detail": "Failed test case details",

    "begin.test token": "▶︎ Check the test case",
    "entrance.test title": "Test case",
    "entrance.test detail": "Use the class token to check the list of test cases."
}